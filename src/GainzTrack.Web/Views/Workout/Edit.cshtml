@using GainzTrack.Core.Interfaces
@model GainzTrack.Core.Entities.WorkoutRoutine
@inject IExercisesService ExercisesService

@{ Layout = null;}

<link rel="stylesheet" href="https://use.fontawesome.com/releases/v5.5.0/css/all.css" integrity="sha384-B4dIYHKNBt8Bc12p+WXckhzcICo0wtJAoU8YZTY5qE0Id1GSseTk6S+L3BlXeVIU" crossorigin="anonymous">
<link rel="stylesheet" href="~/lib/bootstrap/dist/css/bootstrap.css" />
<link rel="stylesheet" href="~/css/site.css" />

<h3>Form will be here</h3>

<div class="form-container">
    <form id="ms-form" asp-controller="Workout" asp-action="Edit" method="post">
        <ul id="progress-bar">
            <li class="active-bar">Information Setup</li>
            <li>Exercises Setup</li>
        </ul>
        <fieldset>
            <div>
                <h2 class="fs-title">Information Setup</h2>
                <input id="workoutcreate-name" asp-for="Name" placeholder="Workout name" />
                <div style="margin-bottom:10px;">
                    <span asp-validation-for="Name" class="text-danger"></span>
                </div>
            </div>
            <div>
                <input id="toggle-on" type="radio" asp-for="IsPublic" value="true" checked class="toggle toggle-left">
                <label for="toggle-on" class="toggle-btn">Public</label>
                <input id="toggle-off" type="radio" asp-for="IsPublic" value="false" class="toggle toggle-right">
                <label for="toggle-off" class="toggle-btn">Private</label>
            </div>
            <button class="next action-btn" type="button">Next</button>

        </fieldset>
        <fieldset>
            <div>
                <div id="custom-exercise-error" class="alert alert-danger" role="alert"></div>
                <div id="custom-exercise-success" class="alert alert-success" role="alert"></div>
                <h2 class="fs-title">Exercises Setup</h2>

                <input type="checkbox" id="click-custom-modal" class="hide-it custom-exercise" />
                <label id="add-custom-exercise" for="click-custom-modal"><a>Add custom exercise</a></label>

                <hr />
                <div class="custom-exercises-modal-item">
                    <label id="custom-exercises-close" class="close-exercises" for="click-custom-modal">X</label>

                    <label>Exercise name</label>
                    <input id="custom-exercise-name" type="text" placeholder="Exercise name" />
                    <div class="alert alert-warning" role="alert">
                        <strong>Important!</strong> provide a valid video url using <a href="http://www.youtube.com" target="_blank">YouTube</a>
                        of the proper form of the exercise.You can easily find one with simple search!
                    </div>
                    <input id="custom-exercise-videoUrl" type="url" placeholder="Video url" />

                    <div class="custom-exercise-submit">Submit</div>
                </div>
                <div class="overlay">
                </div>

                <div class="days-dropdown">

                    @foreach (var day in Model.WorkoutDays)
                    {
                        <div>
                            <h4 class="remove-day-style">Remove</h4>
                            <select class="select-dropdown" name="days">

                                @await Html.PartialAsync("~/Views/Workout/Partials/_GetDaysOfWeekDropdown.cshtml", day.Day)

                            </select>
                            <div class="list-exercises">
                                @foreach (var exercise in day.ExerciseWorkoutDay)
                                {

                                    @await Html.PartialAsync("~/Views/Workout/Partials/_RenderCurrentExercises.cshtml",
                                                             new Dictionary<string, string> { {"ExerciseName",exercise.Exercise.ExerciseName},
                                                                                              {"Day", Convert.ToInt32(day.Day).ToString()},
                                                                                              {"VideoUrl",exercise.Exercise.VideoUrl } })

                                }
                            </div>
                            <div class="add-exercise-style">

                                @{ var guidModal = Guid.NewGuid().ToString().Substring(4);}


                                <input type="checkbox" id="click-@guidModal" class="hide-it existing-exercise" />

                                <label id="add-existing-exercise" for="click-@guidModal"><a class="exercise-action-btn">Choose existing exercise</a></label>
                                <div class="exercises-modal-item">
                                    <label class="close-exercises" for="click-@guidModal">X</label>
                                    <div>

                                        @await Component.InvokeAsync("AddExercises", guidModal)
                                    </div>
                                </div>
                                <div class="overlay">

                                </div>
                            </div>
                            <hr />
                        </div>
                    }
                    <h4 id="add-day" class="add-day-style">Add day</h4>
                </div>
            </div>
            <input value="@Model.Id" readonly="readonly" style="display:none" type="text" name="WorkoutId" />
            <button class="previous action-btn" type="button">Prev</button>
            <button id="submit-workout" class="edit action-btn" type="submit">Save</button>
        </fieldset>

    </form>

</div>



<script src="https://cdnjs.cloudflare.com/ajax/libs/jquery-easing/1.3/jquery.easing.min.js"></script>
<script src="~/lib/jquery/dist/jquery.js"></script>
<script src="~/lib/bootstrap/dist/js/bootstrap.js"></script>
<script src="~/js/site.js" asp-append-version="true"></script>
@section Scripts {
    @await Html.PartialAsync("_ValidationScriptsPartial")
}
